#!/usr/bin/env zsh
#
# Copyright (C) 2011-2013 Dyne.org Foundation
#
# Dowse is designed, written and maintained by Jaromil
#
# This source code is free software; you can redistribute it
# and/or modify it under the terms of the GNU Public License
# as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later
# version.
#
# This source code is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  Please refer to the GNU Public License for more
# details.
#
# You should have received a copy of the GNU Public License
# along with this source code; if not, write to: Free
# Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
# 02139, USA.


# {{{ GLOBALS

VERSION=0.2
DATE="Jul/2013"

QUIET=0
DEBUG=1

SCRIPT=$0

# standard output message routines
autoload colors; colors
# it's always useful to wrap them, in case we change behaviour later
notice() { if [[ $QUIET == 0 ]]; then print "$fg_bold[green][*]$fg_no_bold[default] $1" >&2; fi }
error()  { if [[ $QUIET == 0 ]]; then print "$fg[red][!]$fg[default] $1" >&2; fi }
func()   { if [[ $DEBUG == 1 ]]; then print "$fg[blue][D]$fg[default] $1" >&2; fi }
act()    {
    if [[ $QUIET == 0 ]]; then
	if [ "$1" = "-n" ]; then
	    print -n "$fg_bold[white] . $fg_no_bold[default] $2" >&2;
	else
	    print "$fg_bold[white] . $fg_no_bold[default] $1" >&2;
	fi
    fi
}


# honor quiet and debug flags as early as possible
if [[ ${@} == *-q* ]]; then QUIET=1; fi
if [[ ${@} == *-D* ]]; then DEBUG=1; fi

DIR=${DOWSE:-`pwd`}


# pid files for our daemons
pid_squid=$DIR/run/squid.pid
pid_dnsmasq=$DIR/run/dnsmasq.pid
pid_privoxy=$DIR/run/privoxy.pid

# }}}


# {{{ CHECKS

{ test -r conf } || {
    error "The dowse script must be run inside its source directory"
    return 1 }

{ test -r conf/settings } || {
    error "Dowse configuration is missing, create conf/settings"
    return 1 }

{ test -r conf/network } || {
    error "No network is configured, create conf/network"
    return 1 }

notice "Dowse $VERSION ($DATE)"
func "loading configuration from $DIR/conf/settings"
source conf/settings

# setup dirs
mkdir -p log
chmod go-rwx log
chown $dowseuid:$dowsegid log

mkdir -p run
chmod go-rwx run
chown $dowseuid:$dowsegid run

# create the cache dir in RAM
mkdir -p /dev/shm/dowse
chown $dowseuid:$dowsegid /dev/shm/dowse
chmod go-rwx /dev/shm/dowse

# }}}



# {{{ SETUP
dowse_setup() {
    act "Configuring our box and connecting it to the Internet..."

    func "reading configuration in conf/settings"

    func "generating dnsmasq.conf"
    cat <<EOF > $DIR/run/dnsmasq.conf
address=/$hostname/$dns
address=/.i2p/$dns
address=/.onion/$dns
bogus-priv
cache-size=1500
conf-dir=/etc/dnsmasq.d
dhcp-range=$dowseguests
addn-hosts=$DIR/run/hosts
dhcp-leasefile=$DIR/run/leases
domain-needed
domain=$lan
expand-hosts
interface=$interface
listen-address=$dns,127.0.0.1
local=/$lan/
user=$dowseuid
group=$dowsegid
EOF

    func "generating privoxy.conf"
    cat <<EOF > $DIR/run/privoxy.conf
user-manual /usr/share/doc/privoxy/user-manual
confdir /etc/privoxy
logdir $DIR/log/privoxy
listen-address  0.0.0.0:8118
toggle  1
enable-remote-toggle  0
enable-remote-http-toggle  0
enable-edit-actions 1
enforce-blocks 0
buffer-limit 64000

forwarded-connect-retries  0
accept-intercepted-requests 1
allow-cgi-request-crunching 0
split-large-forms 0
keep-alive-timeout 5
socket-timeout 300
handle-as-empty-doc-returns-ok 1


# pass through tor for urls.onion
forward-socks4a .onion $dns:9050 .

# TODO: tor might use polipo (web cache)
# forward / $dns:8123
# forward / 127.0.0.1:8123

# pass through i2p for urls.i2p
forward .i2p $dns:4444
forward .i2p 127.0.0.1:4444

# direct access
forward $hostname .

filterfile default.filter
actionsfile match-all.action # Actions that are applied to all sites and maybe overruled later on.
actionsfile default.action   # Main actions file
actionsfile user.action      # User customizations
EOF

func "generating squid.conf"

cat <<EOF > $DIR/run/squid.conf
pid_filename $pid_squid
cache_effective_user proxy
cache_store_log none
cache_log $DIR/log/squid_cache.log
access_log $DIR/log/squid_access.log squid

# avoid having a physical cache directory
#cache_dir aufs /dev/shm/dowse 300
cache_dir aufs /dev/shm/dowse 300 16 256
maximum_object_size 10 MB
minimum_object_size 512 KB

acl all src all
acl manager proto cache_object
acl localhost src 127.0.0.1/32
acl to_localhost dst 127.0.0.0/8 0.0.0.0/32

acl localnet src $dowsenet

acl SSL_ports port 443		# https
acl Safe_ports port 80		# http
acl Safe_ports port 443		# https
acl purge method PURGE
acl CONNECT method CONNECT

http_access allow manager localhost
http_access deny manager
http_access allow purge localhost
http_access deny purge
http_access deny !Safe_ports
http_access deny CONNECT !SSL_ports

http_access allow localnet
http_access allow localhost

http_access deny all

icp_access allow localnet
icp_access deny all

http_port 3128 transparent

hierarchy_stoplist cgi-bin ?

refresh_pattern ^ftp:		1440	20%	10080
refresh_pattern ^gopher:	1440	0%	1440
refresh_pattern -i (/cgi-bin/|\?) 0	0%	0
refresh_pattern (Release|Packages(.gz)*)$	0	20%	2880
refresh_pattern .		0	20%	4320

acl shoutcast rep_header X-HTTP09-First-Line ^ICY.[0-9]
upgrade_http0.9 deny shoutcast

acl apache rep_header Server ^Apache
broken_vary_encoding allow apache

extension_methods REPORT MERGE MKACTIVITY CHECKOUT

cache_mgr Dowse

hosts_file $DIR/run/hosts

coredump_dir $DIR/log

cache_peer localhost parent 8118 0 default no-query no-digest no-netdb-exchange
never_direct allow all

header_access From deny all

# the settings below are restrictive:
# they grant more privacy but break many websites!
# header_access Link deny all
# header_access Server deny all
# header_access Referer deny all
# header_access User-Agent deny all
# header_access WWW-Authenticate deny all

EOF

func "Fixing entries for known peers"
known=`cat conf/network | grep -v '^#'`
rm -f $DIR/run/dnsmasq.network
# this is basically a dnsmasq host configuration file
print "dhcp-option=option:router,$gateway" > $DIR/run/dnsmasq.network

# this is our generated hosts file
func "Generating hosts file"
rm -f $DIR/run/hosts
echo "127.0.0.1 localhost" > $DIR/run/hosts
for i in ${(f)known}; do
    echo "$i" | grep '^..:..:..:..:..:..' > /dev/null
    if [ $? = 0 ]; then # mac address is first
	host=${i[(w)2]}
	ip=${i[(w)3]}
    else # no mac address specified
	host=${i[(w)1]}
	ip=${i[(w)2]}
    fi
    { test "$host" = "ignore" } || {
    # add a line to the hosts list
	print "$ip $host" >> $DIR/run/hosts }
done

func "generating dnsmask.network"
for i in ${(f)known}; do
    echo "$i" | grep '^..:..:..:..:..:..' > /dev/null
    { test $? = 0 } || { continue } # skip if no mac address
    func "$i"
    # gather configuration into variables, line by line
    mac=${i[(w)1]}
    host=${i[(w)2]}
    ip=${i[(w)3]}

    # add a line to the dnsmasq host list
    print "dhcp-host=$mac, $host, $ip" >> $DIR/run/dnsmasq.network

done

notice "Setup completed in $DIR"
return 0
}
# }}}

# {{{ START/STOP FORMULAS


dnsmasq_stop() {
    { test -r $pid_dnsmasq } && {
	act "Stopping dnsmasq (`cat $pid_dnsmasq`)"
	kill `cat $pid_dnsmasq`
	rm -f $pid_dnsmasq
    }
}
dnsmasq_start() {
    act "Preparing to launch dnsmasq..."

    # if running, stop to restart
    dnsmasq_stop

    func "dnsmasq --pid-file $DIR/run/dnsmasq.pid -C $DIR/dnsmasq.conf"
    dnsmasq --pid-file=$pid_dnsmasq -C $DIR/run/dnsmasq.conf
}

squid_stop() {
    { test -r $pid_squid } && {
        pid=`cat $pid_squid`
	ps ax | grep '$pid' > /dev/null
	{ test $? = 0 } || { func "removing stale pid for squid" ; rm -f $pid_squid; return 1 }
	act "Stopping squid (`cat $pid_squid`)"
	squid -f $DIR/run/squid.conf -k shutdown
#	kill `cat $pid_squid`
#	rm -f $pid_squid
    }
}
squid_start() {
    act "Preparing to launch Squid..."

    # if running, reconfigure (??)
#    { test -r $pid_squid } && {
#	squid -f $DIR/run/squid.conf -k reconfigure
#	return 0 }

    func "setuidgid $dowseuid squid -f $DIR/run/squid.conf"
    # populate the volatile cache
    setuidgid $dowseuid squid -z -f $DIR/run/squid.conf
    # launch the squid
    setuidgid $dowseuid squid -f $DIR/run/squid.conf
}

privoxy_stop() {
    { test -r $pid_privoxy } && {
	act "Stopping privoxy (`cat $pid_privoxy`)"
	kill `cat $pid_privoxy`
	rm -f $pid_privoxy
    }
}
privoxy_start() {
    act "Preparing to launch privoxy..."

    # if running, stop to restart
    privoxy_stop

    func "setuidgid $dowseuid privoxy --pidfile $pid_privoxy $DIR/privoxy.conf"
    privoxy --user $dowseuid --pidfile $pid_privoxy $DIR/run/privoxy.conf
}
# }}}


# {{{ START
dowse_start() {
    act "Checking requirements to run dowse..."

    func "required programs"
    for req in dnsmasq iptables privoxy squid; do
	command -v $req >/dev/null
	{ test $? != 0 } && {
	    error "Cannot find $req. You require more BLINGBLING man, please install it."
	    return 1
	}
    done

    func "root access"
    { test "$UID" = "0" } || {
	error "Dowse needs root access to run."
	return 1 }


    notice "Setting up the network..."

    PGL=`pidof pgld`
    { test "$PGL" = "" } || {
	act "PeerGuardian found running, will restart it accordingly"
	pglcmd stop }

    act "Setting up $interface interface"
    ifconfig eth0 $dns netmask $netmask up
    route add default gw $wan

    act "Creating a virtual bridge"
    ifconfig | grep '^br0' > /dev/null
    if [ $? != 0 ]; then brctl addbr br0; fi
    ifconfig br0 $gateway netmask $netmask up

    func "enable masquerading over bridge"
    modprobe nf_conntrack_ipv4
    sysctl net.netfilter.nf_conntrack_acct=1

    func "enable ip forwarding"
    print 1 > /proc/sys/net/ipv4/ip_forward

    func "set up ip masquerading"
    iptables --flush
    iptables --table nat --flush
    iptables --delete-chain
    iptables --table nat --delete-chain

    func "setup route towards wired network"
    iptables --table nat --append POSTROUTING --out-interface eth0 -j SNAT --to $dns
    iptables --append FORWARD --in-interface $interface -s $dowsenet -j ACCEPT

    func "setup transparent proxy to squid"
    iptables -t nat -A PREROUTING -i $interface -s $dowsenet -p tcp --dport 80 \
	-j REDIRECT --to-port 3128

    func "defend the network from ipv6"
    ip6tables -F
    ip6tables -P INPUT DROP
    ip6tables -P FORWARD DROP
    ip6tables -P OUTPUT DROP

    # start the dnsmasq daemon
    dnsmasq_start

    # start the privoxy daemon
    privoxy_start

    act "Pinning down MAC addresses in ARP entries..."
    known=`cat conf/network | grep -v '^#'`
    for i in ${(f)known}; do
	# check if its a mac address
	echo "$i" | grep '^..:..:..:..:..:..' > /dev/null
        { test $? = 0 } || { continue } # skip if no mac address

	mac=${i[(w)1]}
	host=${i[(w)2]}
	ip=${i[(w)3]}

	{ test "$host" = "ignore" } && { continue }

	func "$i"
	arp -s $ip $mac

    done

    # start the squid daemon
    squid_start


    # if PeerGuardian was running, start it again
    { test "$PGL" = "" } || { pglcmd start }

}
# }}}

# {{{ STOP
dowse_stop() {
    act "Stopping all services."
    squid_stop
    privoxy_stop
    dnsmasq_stop

}
# }}}

# {{{ MAIN

# we use a very simple argument parser
case "$1" in
    restart|start) dowse_setup; dowse_start ;;
    release) rm $DIR/run/leases; dowse_setup; dowse_start ;;
    stop) dowse_stop ;;
    *) echo "dowse: command not found: $1" ;;
esac

# }}}
