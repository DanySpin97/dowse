#!/usr/bin/env zsh

redis-extract() {
    fn redis-extract

    [[ -r $R/run/redis-server ]] && return 0

    deb-download redis-server
    deb-download redis-tools

    cp $R/tmp/usr/bin/redis-server     $R/run \
        && cp $R/tmp/usr/bin/redis-cli $R/run \
            || {
            error "redis binaries not found"
            return 1 }

    act "redis binary imported"
    func "`find $R/tmp`"
#    rm -rf $R/tmp
    func "`file $R/run/redis-server`"

}

redis-conf() {
    fn redis-conf

    cat <<EOF
daemonize yes

# tcp-backlog 511

bind 127.0.0.1

maxclients 100

timeout 0

tcp-keepalive 0

loglevel notice

databases 16

save 900 1
save 300 10
save 60 10000

stop-writes-on-bgsave-error yes

rdbcompression yes

rdbchecksum yes

dbfilename dump.rdb

dir $R/run

slave-serve-stale-data yes

slave-read-only yes

repl-disable-tcp-nodelay no

slave-priority 100

appendonly no

appendfilename "appendonly.aof"

appendfsync everysec

no-appendfsync-on-rewrite no

auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb

lua-time-limit 5000

slowlog-log-slower-than 10000

slowlog-max-len 128

# latency-monitor-threshold 0

notify-keyspace-events ""

hash-max-ziplist-entries 512
hash-max-ziplist-value 64

list-max-ziplist-entries 512
list-max-ziplist-value 64

set-max-intset-entries 512

zset-max-ziplist-entries 128
zset-max-ziplist-value 64

# hll-sparse-max-bytes 3000

activerehashing yes

client-output-buffer-limit normal 0 0 0
client-output-buffer-limit slave 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

hz 10

aof-rewrite-incremental-fsync yes
EOF
}

redis-start() {
    fn redist-start
    conf=${1:-$R/run/redis.conf}
    req=(conf)
    freq=($conf)
    ckreq || return 1

    [[ "$1" = "" ]] || shift 1

    pidfile=`awk '/pidfile/ { print $2 }' $conf`
    func "redis $conf $* (pidfile: $pidfile)"

    $R/run/redis-server $conf $*

    act "blank volatile databases"
    print "flushdb" | redis runtime > /dev/null
    print "flushdb" | redis dynamic > /dev/null

    savepid redis $pidfile

    return $?
}
