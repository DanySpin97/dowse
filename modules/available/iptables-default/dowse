#!/usr/bin/env zsh

dowse_mod_name=iptables-default
dowse_mod_desc="Default iptables rules for basic protection"
dowse_mod_type=(firewall)
dowse_mod_ports=()
dowse_mod_deps=(root)
dowse_mod_authors=(Jaromil)
dowse_mod_version=0.1



# configure the layer 3 firewall rules
# (excluding the nat which is in dowse core)

iptables() {
    func "iptables $*"
    /sbin/iptables $*
}

module-setup() {

    # nop

}

module-start() {
   # This table allow all established connections and related traffic
   # through the firewall without further filtering.

   # Create and flush the table.
   iptables -N ASSURED
   iptables -F ASSURED

   # Allow all established connections and related traffic.
   iptables -A ASSURED -m conntrack --ctstate ESTABLISHED -j ACCEPT
   iptables -A ASSURED -m conntrack --ctstate RELATED -j ACCEPT

   # Set conditions in which the tables will be traversed.
   iptables -A INPUT -j ASSURED
   iptables -A OUTPUT -j ASSURED
   iptables -A FORWARD -j ASSURED

   # Create and flush the table.
   iptables -N TCP
   iptables -F TCP

   # Help to prevent sequence number prediction attacks. This rule
   # must come before the NEW SYN rule below to be effective.
   iptables -A TCP -p tcp --tcp-flags SYN,ACK SYN,ACK -m state --state NEW \
       -j REJECT --reject-with tcp-reset

   # Something overlooked by many firewalls is that if you use a
   # matching rule with the NEW state but with the SYN bit unset, it
   # will not match and thus get past the firewall rule. Simply making
   # a match against the NEW state does not do what most people intend
   # when they write the rule. The following rule takes care of that
   # problem. The rule drops any NEW connection attempts that do not
   # have the SYN bit set. After this rule is set, we can freely match
   # new connection attempts with a match against the NEW state alone.
   iptables -A TCP -p tcp ! --syn -m conntrack --ctstate NEW -j DROP

   # Rate limit the number of new connections from an individual IP
   # address to help defend against SYN flood attacks.
   iptables -A TCP -p tcp -m conntrack --ctstate NEW -m recent \
       --name blacklist --update --seconds 1 --hitcount 20 -j DROP

   # Drop illegal, malformed, or potentially harmful tcp flag
   # combinations.  This also helps prevent some port scans.
   iptables -A TCP -p tcp --tcp-option 128                    -j DROP
   iptables -A TCP -p tcp --tcp-option 64                     -j DROP
   iptables -A TCP -p tcp --tcp-flags ACK,FIN FIN             -j DROP
   iptables -A TCP -p tcp --tcp-flags ACK,PSH PSH             -j DROP
   iptables -A TCP -p tcp --tcp-flags ACK,URG URG             -j DROP
   iptables -A TCP -p tcp --tcp-flags FIN,RST FIN,RST         -j DROP
   iptables -A TCP -p tcp --tcp-flags SYN,ACK,FIN,RST RST     -j DROP
   iptables -A TCP -p tcp --tcp-flags SYN,FIN SYN,FIN         -j DROP
   iptables -A TCP -p tcp --tcp-flags SYN,RST SYN,RST         -j DROP
   iptables -A TCP -p tcp --tcp-flags ALL ALL                 -j DROP
   iptables -A TCP -p tcp --tcp-flags ALL NONE                -j DROP
   iptables -A TCP -p tcp --tcp-flags ALL FIN,PSH,URG         -j DROP
   iptables -A TCP -p tcp --tcp-flags ALL SYN,FIN,PSH,URG     -j DROP
   iptables -A TCP -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP

   # Limit potential Xmas scans.
   iptables -A TCP -p tcp --tcp-flags ALL FIN,URG,PSH \
       -m limit --limit 3/min --limit-burst 3 -j RETURN
   iptables -A TCP -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP

   # Limit potential furtive port scans (scans that detect closed
   # ports to deduce open ports).
   iptables -A TCP -p tcp --tcp-flags SYN,ACK,FIN,RST RST \
       -m limit --limit 1/second --limit-burst 1 -j RETURN
   iptables -A TCP -p tcp --tcp-flags SYN,ACK,FIN,RST RST -j DROP

   # Drop large numbers of RST packets.  This is to help avoid Smurf
   # attacks by giving the real data packet in the sequence a better
   # chance to arrive first.
   iptables -A TCP -p tcp -m tcp --tcp-flags RST RST \
       -m limit --limit 2/second --limit-burst 2 -j RETURN
   iptables -A TCP -p tcp -m tcp --tcp-flags RST RST -j DROP

   # Set conditions in which the table will be traversed.
   iptables -A INPUT -p tcp -j TCP
   iptables -A FORWARD -p tcp -j TCP

   # Create and flush the table.
   iptables -N ICMP
   iptables -F ICMP

   #    0 = Echo Reply, what gets sent back after a type 8 is received here
   #    3 = Destination Unreachable (inbound) or Fragmentation Needed (out) [RFC792]

   #    4 = Source Quench tells sending IP to slow down its rate to destination
   #    5 = Redirect [RFC792]
   #    6 = Alternate Host Address
   #    8 = Echo Request used for pinging hosts, but see the note above
   #    9 = Router Advertisement [RFC1256]
   #   10 = Router Selection [RFC1256]
   #   11 = Time Exceeded used for traceroute (TTL) or sometimes frag packets
   #   12 = Parameter Problem is some error or weirdness detected in header
   #   13 = Timestamp Request  [RFC792]
   #   14 = Timestamp Reply  [RFC792]
   #   15 = Information Request  [RFC792]
   #   16 = Information Reply  [RFC792]
   #   17 = Address Mask Request  [RFC950]
   #   18 = Address Mask Reply  [RFC950]
   #   30 = Traceroute  [RFC1393]

   # Allow certain icmp types.
   iptables -A ICMP -p icmp --icmp-type 0  -j ACCEPT
   iptables -A ICMP -p icmp --icmp-type 3  -j ACCEPT
   iptables -A ICMP -p icmp --icmp-type 4  -j ACCEPT
   iptables -A ICMP -p icmp --icmp-type 5  -j ACCEPT

   # Limit echo reply traffic to protect against ping floods.
   iptables -A ICMP -p icmp --icmp-type 8 -m limit --limit 1/second --limit-burst 2 -j ACCEPT
   iptables -A ICMP -p icmp --icmp-type 8 -j DROP

   # Allow more icmp types.
   iptables -A ICMP -p icmp --icmp-type 9  -j ACCEPT
   iptables -A ICMP -p icmp --icmp-type 11 -j ACCEPT
   iptables -A ICMP -p icmp --icmp-type 12 -j ACCEPT

   # Drop all other icmp traffic.
   iptables -A ICMP -p icmp -j DROP

   # Set conditions in which the table will be traversed.
   iptables -A INPUT -p icmp -j ICMP


}

module-stop() {

    iptables -F ASSURED
    # iptables -X ASSURED

    iptables -F TCP
    # iptables -X TCP

    iptables -F ICMP
    # iptables -X ICMP

}
