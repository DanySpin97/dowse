#!/usr/bin/env zsh
#
# Copyright (C) 2012-2014 Dyne.org Foundation
#
# Dowse is written by Denis Roio <jaromil@dyne.org>
#
# This source code is free software; you can redistribute it
# and/or modify it under the terms of the GNU Public License
# as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later
# version.
#
# This source code is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  Please refer to the GNU Public License for more
# details.
#
# You should have received a copy of the GNU Public License
# along with this source code; if not, write to: Free
# Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
# 02139, USA.


# {{{ GLOBALS

VERSION=0.6
DATE="Oct/2014"

QUIET=0
DEBUG=1

SCRIPT=$0

# export DOWSE to env with path to the installation
# else start it from inside the dir with ./dowse
dowse_path=${DOWSE:-`pwd`}

# For gettext
TEXTDOMAIN=dowse
typeset -AH opts

source $dowse_path/zlibs/core

# honor quiet and debug flags as early as possible
option_is_set -q && { QUIET=1  }
option_is_set -D && { DEBUG=1; func "Debug mode on";  }

# }}}

# {{{ CHECKS

[[ -r $dowse_path/conf ]] || {
    error "The dowse script must be sourced inside its source directory"
    return 1 }

[[ -r $dowse_path/conf/settings ]] || {
    error "Dowse configuration is missing, create conf/settings"
    return 1 }

[[ -r $dowse_path/conf/network ]] || {
    error "No network is configured, create conf/network"
    return 1 }

notice "Dowse ::1:: - local area network rabdomancy" $VERSION
cat <<EOF

 Copyright (C) 2012-2014 Dyne.org Foundation, License GNU GPL v3+
 This is free software: you are free to change and redistribute it
 For more informations see http://www.dyne.org/software/dowse

EOF

_verbose "Dowse command: ::1 subcommand:: ::2 param::" $subcommand ${PARAM:-none}
_verbose "Caller: uid[::1 uid::], gid[::2 gid::], tty[::3 tty::]." $UID $GID $TTY


{ test "$UID" = "0" } || {
    error "Dowse needs root privileges to operate."
    return 1 }

func "root access via sudo granted"

act "loading configuration from $dowse_path/conf/settings"
source conf/settings

act "daemons running as user and group $dowseuid:$dowsegid"
# setup dirs
mkdir -p log
chmod go-rwx log
chown -R $dowseuid:$dowsegid log

mkdir -p run
chmod go-rwx run
chown -R $dowseuid:$dowsegid run


# }}}

# {{{ SYSTEM SETUP

sysctl_setup() {
cat <<EOF | sysctl -p - >/dev/null
net.ipv4.tcp_syncookies = 1
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.core.rmem_max = 33554432
net.core.wmem_max = 33554432
net.ipv4.tcp_fin_timeout = 4
vm.min_free_kbytes = 65536
net.netfilter.nf_conntrack_tcp_timeout_established = 7200
net.netfilter.nf_conntrack_checksum = 0
net.netfilter.nf_conntrack_tcp_timeout_syn_sent = 15
net.ipv4.tcp_keepalive_time = 60
net.ipv4.tcp_keepalive_intvl = 10
net.ipv4.tcp_keepalive_probes = 3
net.ipv4.ip_local_port_range = 1025 65530
net.ipv4.tcp_timestamps = 0
EOF
}

# }}}

# {{{ DOWSE FUNCTIONS

dowse_check() {
    act "Checking requirements to run dowse..."
    # this is a check on binaries present in PATH
    # if not found, Dowse will abort.
    # for each found, Dowse will load zlibs/$.sh if present
    for req in setuidgid dnsmasq iptables ebtables; do
        require $req || return 1
    done

    act "all is in place."

    return 0
}

# DNSMasq configuration template
dowse_setup() {

    act "Configuring our box and connecting it to the Internet..."

    func "reading configuration in conf/settings"

    # generate dnsmasq configuration
    dnsmasq_conf > $dowse_path/run/dnsmasq.conf

    # set permissions of setup files
    chown -R $dowseuid:$dowsegid log
    chown -R $dowseuid:$dowsegid run

    notice "Setup completed in $dowse_path"
    return 0
}

# }}}

# {{{ MODULES

typeset -a mods

dowse_setup_modules() {
    notice "Scanning for enabled modules..."
    enabled=`find -L $dowse_path/modules/enabled -maxdepth 1 -type d`
    for i in ${(f)enabled}; do
    { test -r $i/conf.zsh } && {
        pushd $i
        act "`basename $i`: initializing module"
        # execute the module_setup()
        source ./conf.zsh
        { test $? = 0 } && {
        mods+=($i)
        DOWSE=$dowse_path module_setup }
        popd
    }
    done
}

dowse_start_modules() {
    for i in ${mods}; do
    pushd $i
    act "`basename $i`: starting module"
    # execute the module_start()
    source ./conf.zsh
    DOWSE=$dowse_path module_start
    popd
    done
}

dowse_stop_modules() {
    notice "Scanning for enabled modules..."
    enabled=`find -L $dowse_path/modules/enabled -maxdepth 1 -type d`
    for i in ${(f)enabled}; do
    { test -r $i/conf.zsh } || { continue }
    pushd $i
    act "`basename $i`: stopping module"
        # execute the module_stop()
    source ./conf.zsh
    DOWSE=$dowse_path module_stop
    popd
    done
}

# }}}

# {{{ MAIN

dowse_start() {

    notice "Setting up the network..."

    PGL=`pidof pgld`
    [[ "$PGL" = "" ]] || {
        act "PeerGuardian found running, will restart it accordingly"
        pglcmd stop }

    act "Setting up $interface interface"
    ifconfig $interface $dowse netmask $netmask up
    route add default gw $wan

    func "enable masquerading"
    modprobe nf_conntrack_ipv4
    sysctl net.netfilter.nf_conntrack_acct=1

    # strenghten and optimize a bit the system for networking
    sysctl_setup

    func "enable ip forwarding"
    print 1 > /proc/sys/net/ipv4/ip_forward

    func "bugfix for routing table weirdness in Linux >3.1"
    # see https://lkml.org/lkml/2011/11/18/191
    # and http://www.spinics.net/lists/netdev/msg179687.html
    print 0 >>/proc/sys/net/ipv4/conf/$interface/accept_redirects

    [[ "$firewall" = "no" ]] || {
        ebtables_stop
        iptables_stop
    }

    [[ "$firewall" = "yes" ]] && {
        ebtables_start
        iptables_start
    }

    # start the dnsmasq daemon
    dnsmasq_start $dowse_path/run/dnsmasq.conf

    # if PeerGuardian was running, start it again
    [[ "$PGL" = "" ]] || { pglcmd start }

}

dowse_stop() {
    notice "Stopping all services."
    dnsmasq_stop
    iptables_stop
    ebtables_stop
}

dowse_parse_leases() {
    awk '
BEGIN { c=0 }
{
  mac[c]=$2
  ip[c]=$3
  if($4=="*") host[c]="anonymous"; else host[c]=$4
  c++
}
END {
  printf "mac=("; for(i=0;i<c;i++) { printf "%s ", mac[i] }; printf ")\n"
  printf "ip=("; for(i=0;i<c;i++) { printf "%s ", ip[i] }; printf ")\n"
  printf "host=("; for(i=0;i<c;i++) { printf "%s ", host[i] }; printf ")\n"
}' $dowse_path/run/leases
}

dowse_status() {
    notice "Reporting network status"
    eval `dowse_parse_leases`
    known=()
    ping=()
    for i in {0..${#mac}}; do

        [[ $mac[$i] = "" ]] && { continue }

        known[$i]="unknown"
        grep "${mac[$i]}" $dowse_path/conf/network > /dev/null
        [[ $? = 0 ]] && known[$i]="known"

        ping[$i]="offline"
        nmap -sn -n -oG - $ip[$i] | grep -i 'status: up' > /dev/null
        [[ $? = 0 ]] && ping[$i]="online"

        # additional subcommand "status online" to list only online objects
        [[ "$ping[$i]" == "offline" ]] && [[ "$PARAM" =~ "online" ]] && continue

        [[ "$known[$i]" == "known" ]] && { # found
            yes "::1 ping::\t::2 mac::\t::3 ip::\t::4 host::" $ping[$i] $mac[$i] $ip[$i] $host[$i]
        } || { # not found
            no "::1 ping::\t::2 mac::\t::3 ip::\t::4 host::" $ping[$i] $mac[$i] $ip[$i] $host[$i]
        }
    done
}

dowse_scan() {
    notice "Scanning unknown network objects"
    eval `dowse_parse_leases`

    for s in {0..${#mac}}; do
        [[ $mac[$s] == "" ]] && { continue }
        grep "${mac[$s]}" $dowse_path/conf/network > /dev/null
	    [[ $? == 1 ]] && { # unknown
	        act "Running scan on ::1 ip:: (::2 host::)" ${ip[$s]} ${host[$s]}
            func "$s: nmap -A -F -sT -Pn -T5 \"${ip[$s]}\""
            nmap -A -F -sT -Pn -T5 -n "${ip[$s]}"
	        print
        }
    done

}


dowse_check || {
    error "Aborting operation for missing requirements."
    return 1 }

# initialize commandline parser
typeset -A opts
typeset -A subcommands_opts

main_opts=(q -quiet=q D -debug=D h -help=h v -version=v -no-color)
subcommands_opts[__default]=""
subcommands_opts[start]=""
subcommands_opts[stop]=""
subcommands_opts[status]=""
subcommands_opts[scan]=""
subcommands_opts[restart]=""
subcommands_opts[test]=""
subcommands_opts[release]=""
subcommands_opts[reload]=""

init_commandline ${=argv}

_verbose "Dowse command: ::1 subcommand:: ::2 param::" $subcommand ${PARAM:-none}
_verbose "Caller: uid[::1 uid::], gid[::2 gid::], tty[::3 tty::]." $UID $GID $TTY

case "$subcommand" in
    restart|start)
        dowse_stop
        dowse_setup
        dowse_setup_modules
        dowse_start
        dowse_start_modules
        ;;

    status) dowse_status ;;
    scan) dowse_scan ;;
    release)
        rm $dowse_path/run/leases; dowse_setup; dnsmasq_stop; dnsmasq_start ;;

    reload)
        rm -rf /dev/shm/dowse/*; dowse_setup; setuidgid $dowseuid squid3 -f $dowse_path/run/squid.conf -k rec ;;
    stop)
        dowse_stop_modules;  dowse_stop ;;

    # start dowse and ask for confirmation with timeout, if not present stop
    # this is useful for testing potentially disrupting configurations on a remote
    # machine without loosing the access to it.
    test)
        dowse_stop
        dowse_setup
        dowse_setup_modules
        dowse_start
        dowse_start_modules
        notice "Press 'y' to confirm current configuration (10 sec timeout)"
        read -t 10 -q ans > /dev/null
        case ${ans} in
            y|Y|$'\n') act "Test configuration confirmed." ;;
            *) error "Reverting test configuration."
                dowse_stop_modules
                dowse_stop
                ;;
        esac
        ;;

    # internal commands useful to developers
    'source') ;;
    __default) _print "usage: dowse (start|stop|restart|test)" ;;
    *) error "dowse: command not found: $1" ;;
esac

# be nice with the environment
return 0

# }}}
