#!/usr/bin/env zsh
# Copyright (C) 2012-2015 Dyne.org Foundation
#
# Dowse is designed, written and maintained by Denis Roio <jaromil@dyne.org>
# nmap-parser is written and maintained by Nicola Rossi <nicola@dyne.org>
#
# This source code is free software; you can redistribute it
# and/or modify it under the terms of the GNU Public License
# as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later
# version.
#
# This source code is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  Please refer to the GNU Public License for more
# details.
#
# You should have received a copy of the GNU Public License
# along with this source code; if not, write to: Free
# Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
# 02139, USA.

## nmap-parser

vars+=(varfile processedfile nmapfile hostcount)

arrs+=(nmap_array)
maps+=(nmap_item_paths)


nmap-preprocess() {
    fn nmap-preprocess
    nmap_array=()
	#   nmapfile="$H/run/nmap.xml"

    freq=($nmapfile)
    req=(processedfile)
    ckreq || return 1

    func "launching xmlstarlet on $nmapfile"
    cat $nmapfile | xmlstarlet ed -d '/nmaprun/host[status[@state="down"]]' > "$processedfile"

    hostcount=$(nmap-selectXPath "count(/nmaprun/host)")
    act  "Finding value for nmap_array on ${hostcount} hosts in 'up' state..."
}

nmap-selectXPath() {
    fn nmap-selectXPath $*
    req=(xpath)
    local xpath="$1"
    freq=($processedfile)
    ckreq || return 1

    xmlstarlet sel -t -v $xpath $processedfile
}

nmap-parse() {
    fn nmap-parse
    freq=($nmapfile $thingidx)
    ckreq || return $?

    nmap-preprocess || return $?

    nmap_array=()
    # pick only entries from thingindex that have nmap addresses
    for i in $(awk '/\; \/.*@/ {print $1}' $thingidx); do
        nmap_array+=($i)
    done

    _sql_insert=""

    local _columns=""
    for item in $nmap_array ; do
        nmap_item_paths[$item]=$(awk -F\; '/^[\ \t]*'"$item"'/ {print $2}' $thingidx | tr -d ' ')
        # local printstr="export xpath_$item=$STR"
        # print $printstr  >> $varfile
        [[ "$_columns" = "" ]] && _columns="$item" || _columns="${_columns},${item}"
    done

    func "hostcount="$hostcount
	for i in $(seq 1 $hostcount); do
        local _values=""
        local _update_stm=""
        local _s=""


        # column is item
        for column in $nmap_array ; do
			xpathStr="/nmaprun/host[$i]/$nmap_item_paths[$column]"
			_val=$(nmap-selectXPath ${xpathStr})

			[[ "$_values" = "" ]] && _values="'$_val'" || _values="${_values},'${_val}'"

			if [[ "${column}" = "macaddr" ]]; then
				continue
			else
				_s="${column}='${_val}'" ;
				[[ "$_update_stm" = "" ]] && _update_stm="${_s}" || _update_stm="${_update_stm},${_s}"
			fi
        done
		
		act "columns: $_columns"
		act "values: $_values"
		act "keys: $_update_stm"
#        _new_stm="INSERT INTO found ( $_columns ) VALUES ( $_values ) ON DUPLICATE KEY UPDATE  $_update_stm ;"
#        _sql_insert+=$_new_stm

    done

#    print $_sql_insert # | tee | $sql $db[things]

}
