#!/usr/bin/env zsh


# high-level daemon starter, synopsis:
#
# start daemon-name [ pidfile configfile ]
#
start() {
    fn start $*
    _daemon="$1"
    pid=${2:-$R/run/$_daemon.pid}
    conf=${3:-$R/run/$_daemon.conf}

    shift
    req=(_daemon)
    ckreq || return $?


    case `uname -m` in
        arm*)   lib=/usr/lib/arm-linux-gnueabihf ;;
        x86_64) lib=/usr/lib/x86_64-linux-gnu    ;;
        *) lib=/usr/lib ;;
    esac

    act "starting daemon: $_daemon $*"
    execpath=${execmap[$_daemon]}
    func "execpath: $execpath"
    [[ "$execpath" = "" ]] && {
        error "$_daemon not found in src/paths.sh: add and recompile"
        return 1 }

    if command -v $_daemon-exec > /dev/null; then
        # we preload jemalloc for better memory handling
        LD_PRELOAD=${execmap[libjemalloc]} $_daemon-exec $execpath
        return $?
    else
        warning "daemon executable not found: $execpath"
        return 1
    fi
}

stop() {
    fn stop $*
    _daemon="$1"
    req=(_daemon)
    ckreq || return $?

    _pid=`getpid $_daemon`

    if [[ "$_pid" = "" ]]; then
        return 1
    else
        act "stopping $_daemon ($_pid)"
        if command -v $_daemon-kill > /dev/null; then
            $_daemon-kill
        else
            killpid $_pid
            waitpid $_pid || {
                error "$_daemon: could not stop pid $_pid"
                return 1 }
        fi
    fi
    # TODO: kill -9
    return 0
}

savepid() {
    fn savepid $*

    _daemon="$1"
    _pid="$2"
    req=(_daemon _pid)
    ckreq || return $?

    print "SET daemon-${_daemon}-pid \"`cat $_pid`\"" \
          | redis runtime > /dev/null

}

getpid() {
    fn getpid $*
    _daemon="$1"
    req=(_daemon)
    ckreq || return $?

    unset _pid

    print QUIT | redis runtime && {
        _pid=`print "GET daemon-${_daemon=}-pid" | redis runtime` }

    # [[ "$_pid" = "" ]] && [[ -r $R/run/${_daemon}.pid ]] && {
    #     _pid=`cat $R/run/${_daemon}.pid` }

    [[ "$_pid" = "" ]] && {
        func "$_daemon: pid not found"
        return 1 }

    print $_pid
    return 0
}

killpid() {
    fn killpid $*
    _daemon="$1"
    req=(_daemon)
    ckreq || return $?

    func "killing pid $_pid"
    ps -p $_pid > /dev/null && kill $_pid
    rm -f $R/run/${_daemon}.pid

}

waitpid() {
    fn waitpid $*
    _pid="$1"
    _timeout=${2:-60}
    req=(_pid)
    ckreq || return $?

    local lastnewline=0
    for c in {1..$_timeout}; do
        # here check if pid its running
        if ps -p $_pid > /dev/null; then
            print -n . ; lastnewline=1
            sleep 1
        else
            break
        fi
        # todo: timeout with kill -9
    done
    # this because we care to look good on the console
    [[ $lastnewline = 1 ]] && print

    [[ $c = $_timeout ]] && {
        warning "operation timed out, pid($_pid) still running."
        return 1 }

    return 0
}
