#!/usr/bin/env zsh
# Copyright (C) 2012-2015 Dyne.org Foundation
#
# Dowse is designed, written and maintained by Denis Roio <jaromil@dyne.org>
# nmap-parser is written and maintained by Nicola Rossi <nicola@dyne.org>
#
# This source code is free software; you can redistribute it
# and/or modify it under the terms of the GNU Public License
# as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later
# version.
#
# This source code is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  Please refer to the GNU Public License for more
# details.
#
# You should have received a copy of the GNU Public License
# along with this source code; if not, write to: Free
# Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
# 02139, USA.

## nmap-parser

vars+=(varfile processedfile nmapfile hostcount)

arrs+=(nmap_array)
maps+=(nmap_item_paths)


nmap-preprocess() {
    fn nmap-preprocess
    freq=($nmapfile)
    req=(processedfile)
    ckreq || return 1

    func "launching xmlstarlet on $nmapfile"
    cat $nmapfile | xmlstarlet ed -d '/nmaprun/host[status[@state="down"]]' > "$processedfile"
}

nmap-selectXPath() {
    fn nmap-selectXPath $*
    req=(xpath)
    local xpath="$1"
    freq=($processedfile)
    ckreq || return 1

    xmlstarlet sel -t -v $xpath $processedfile
}

nmap-parse() {
    fn nmap-parse
    freq=($nmapfile $thingidx)
    ckreq || return $?

    nmap_array=()
    # pick only entries from thingindex that have nmap addresses
    for i in $(awk '/\; \/.*@/ {print $1}' $thingidx); do
        nmap_array+=($i)
    done

    hostcount=$(nmap-selectXPath "count(/nmaprun/host)")
    act  "Finding value for nmap_array on ${hostcount} hosts in 'up' state..."

	# thing defaults
	thing_defaults="isadmin 'no' enable_to_browse 'no'"

	for i in $(seq 1 $hostcount);do
		_redis_query="hmset thing_$(nmap-selectXPath '/nmaprun/host['$i']/address[@addrtype="mac"]/@addr')"
		_redis_query=$_redis_query:l
		[[ "$_redis_query" = "hmset thing_" ]] && continue  # skip if there's no MAC
		local _key="$(print $_redis_query | awk '{print $2}')"
		local _key="$(print hgetall $_key | redis storage)"
		[[ -n "$_key" ]] || _redis_query="$_redis_query $thing_defaults"
		for item in $nmap_array; do
			_field="$(awk -F\; '/^[\ \t]*'$item'/ {print $2}' $thingidx | sed "s/\$i/$i/")"
			_val="$(nmap-selectXPath $_field)"
			[[ -n "$_val" ]] && _redis_query="$_redis_query $item '$_val:l'"

			local time=$(nmap-selectXPath '/nmaprun/host['$i']/@starttime')
			local mac=$(print $_redis_query | awk '{print $2}')
			local age=$(print "hmget $mac age" | redis storage)
			# add age only if it's not already there (aka. first seen)
			[[ -n "$age" ]] || _redis_query="$_redis_query age $time"
			_redis_query="$_redis_query last $time"
		done
		print "$_redis_query" | redis storage
	done
}
