#!/usr/bin/env zsh

# func "load paths and execmaps"
# maps+=(execmap execrules)
# execmap=()
# source $R/db/execmap.zkv
# execrules=()
# source $R/db/execrules.zkv

# high-level launcher using execmap and sup when necessary
launch() {
    fn launch $*
    local _cmd="$1"
    func "command: $_cmd"
    local _path=${execmap[$_cmd]}
    req=(_cmd _path)
    _freq=($_path)
    ckreq || return $?

    local _ret
    _rule=$execrules[$_cmd]
    case $_rule in
        user)
            shift 1
            func "user launch: $_path $*"
            $_path $*
            _ret=$?
            func "$_cmd (user) returns $_ret"
            return $_ret
            ;;
        root) 
            shift 1
            func "root launch: $_path $*"
            $R/bin/sup $_path $*
            _ret=$?
            func "$_cmd (root) returns $_ret"
            return $_ret
            ;;
        *)
            error "unknown execrule for $_cmd to launch: $_rule"
            return 1
            ;;
    esac
}


# high-level daemon starter, synopsis:
#
# start daemon-name [ pidfile configfile ]
#
start() {
    fn start $*
    _daemon="$1"

    shift

    req=(_daemon)
    ckreq || return $?

	args="$*"

    conf=$H/run/$_daemon.conf

	# TODO: check if already running
    _pid=`getpid $_daemon`
    [[ "$_pid" = "" ]] || {
		warning "$_daemon already running (pid $_pid)"
        return 0
	}

    # if configuration is not defined, generate the default
    act "regenerating configuration for $_daemon"
    $_daemon-conf > $conf

    act "starting daemon: $_daemon $*"
    execpath=${execmap[$_daemon]}
    func "execpath: $execpath"
    [[ "$execpath" = "" ]] && {
		execpath=${execmap[${_daemon%-*}]}
		[[ "$execpath" = "" ]] && {
			error "$_daemon not found in execpath"
			return 1 }
	}

    if command -v $_daemon-exec > /dev/null; then
        # we preload jemalloc for better memory handling
		func "$_daemon-exec $args"
        LD_PRELOAD=${execmap[libjemalloc]} $_daemon-exec $args
        return $?
    else
        warning "daemon executable not found: $execpath"
        return 1
    fi
}

stop() {
    fn stop $*
    _daemon="$1"
    req=(_daemon)
    ckreq || return $?

    _pid=`getpid $_daemon`

    if [[ "$_pid" = "" ]]; then
		warning "$_daemon is not running"
        return 1
    else
        act "stopping $_daemon ($_pid)"
        if command -v $_daemon-kill > /dev/null; then
            $_daemon-kill
        else
            killpid $_pid
            waitpid $_pid || {
                error "$_daemon: could not stop pid $_pid"
                return 1 }
            [[ "$_daemon" = "redis-server" ]] || {
                print "DEL daemon-$_daemon-pid" | redis runtime
            }
        fi
    fi
    # TODO: kill -9
    return 0
}

savepid() {
    fn savepid $*

    local _daemon="$1"
    local _pid="$2"
    req=(_daemon)
    ckreq || return $?

	# make sure the pidfiles are written
	sleep 2
	# TODO: check if its a number we don't need to wait

    if [[ -r "$_pid" ]]; then
        print "SET daemon-${_daemon}-pid \"`cat $_pid`\"" \
            | redis runtime > /dev/null
    elif [[ "$_pid[1]" = "/" ]]; then
		warning "$_daemon pidfile wasn't created in $_pid"
		return 1
	else
        print "SET daemon-${_daemon}-pid \"$_pid\"" \
            | redis runtime > /dev/null
    fi
}

getpid() {
    fn getpid $*
    _daemon="$1"
    req=(_daemon)
    ckreq || return $?

    unset _pid

    print QUIT | redis runtime && {
        _pid=`print "GET daemon-${_daemon}-pid" | redis runtime` }
 
    # [[ "$_pid" = "" ]] && [[ -r $H/run/${_daemon}.pid ]] && {
    #     _pid=`cat $H/run/${_daemon}.pid` }

    if [[ "$_pid" = "" ]]; then
        func "$_daemon: pid not found"
        return 1
    else
        func "$_daemon pid found: $_pid"
    fi

    print $_pid
    return 0
}

killpid() {
    fn killpid $*
    _pid="$1"
    req=(_pid)
    ckreq || return $?


    ps -p $_pid > /dev/null || {
        warning "pid not running: $_pid"
        return 0 }

    func "killing $_daemon pid($_pid)"
    if [[ "$execrules[$_daemon]" = "root" ]]; then
        func "root daemon, using sup to kill"
        $R/bin/sup kill $_pid
    else
        kill $_pid
    fi

}

waitpid() {
    fn waitpid $*
    _pid="$1"
    _timeout=${2:-60}
    req=(_pid)
    ckreq || return $?

    local lastnewline=0
    for c in {1..$_timeout}; do
        # here check if pid its running
        if ps -p $_pid > /dev/null; then
            print -n . ; lastnewline=1
            sleep 1
        else
            break
        fi
        # todo: timeout with kill -9
    done
    # this because we care to look good on the console
    [[ $lastnewline = 1 ]] && print

    [[ $c = $_timeout ]] && {
        warning "operation timed out, pid($_pid) still running."
        return 1 }

    return 0
}
