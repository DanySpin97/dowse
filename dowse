#!/usr/bin/env zsh
#
# Copyright (C) 2012-2015 Dyne.org Foundation
#
# Dowse is designed, written and maintained by Denis Roio <jaromil@dyne.org>
#
# This source code is free software; you can redistribute it
# and/or modify it under the terms of the GNU Public License
# as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later
# version.
#
# This source code is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  Please refer to the GNU Public License for more
# details.
#
# You should have received a copy of the GNU Public License
# along with this source code; if not, write to: Free
# Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
# 02139, USA.


# {{{ GLOBALS

dowse_version=0.7
dowse_release_date="Mar/2015"

zkv=1
restful=1
helper=1

R=${DOWSE_PATH:-`pwd`}

source $R/zlibs/zuper

# For gettext
TEXTDOMAIN=dowse

# path and debugging
vars+=(R dowse_loaded debug quiet script fun)
vars+=(last_notice last_act last_func)
vars+=(root)
arrs+=(mods)

# export DOWSE to env with path to the installation
# else start it from inside the dir with source dowse
DEBUG=${DEBUG:-0}
QUIET=${QUIET:-0}
LOG=${LOG:-""}

# uid/git
vars+=(dowse_uid dowse_gid)

# globals filled by lease parser
arrs+=(host mac ip)

# globals used when loading modules
vars+=(dowse_mod_name dowse_mod_desc dowse_mod_version)
arrs+=(dowse_mod_type dowse_mod_ports dowse_mod_deps)
arrs+=(dowse_mod_authors dowse_mod_tags)

# consul's configuration map
maps+=(consul_conf consul_watch)

zmodload zsh/system
zmodload zsh/mapfile
zmodload zsh/regex
zmodload zsh/sched
zmodload zsh/system
zmodload zsh/net/tcp

source $R/zlibs/messaging.sh
source $R/zlibs/processes.sh
source $R/zlibs/iptables.sh
source $R/zlibs/ebtables.sh
source $R/zlibs/confstore
source $R/zlibs/consul

source $R/daemons/dnsmasq
source $R/daemons/squid3
source $R/daemons/privoxy
source $R/daemons/polipo

# conclude initialization
source $R/zlibs/zuper.init

consul_conf=()
consul_watch=()

if [[ $dowse_loaded = 1 ]]; then
    act "Dowse CLI reloaded ::1::" $dowse_version
    RPROMPT=Dowse
else
    notice "Dowse CLI ::1:: - local area network rabdomancy" $dowse_version
    dowse_loaded=1
    RPROMPT=Dowse
fi

cat <<EOF

 Copyright (C) 2012-2015 Dyne.org Foundation, License GNU GPL v3+
 This is free software: you are free to change and redistribute it
 For more informations see http://www.dyne.org/software/dowse

EOF

# }}}

# {{{ SYSTEM SETUP

sysctl-setup() {
    [[ -z $root ]] && {
        warn "no super user privileges: skipping sysctl settings"
        return 0
    }

    cat <<EOF | sysctl -p - >/dev/null
net.ipv4.tcp_syncookies = 1
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.core.rmem_max = 33554432
net.core.wmem_max = 33554432
net.ipv4.tcp_fin_timeout = 4
vm.min_free_kbytes = 65536
net.netfilter.nf_conntrack_tcp_timeout_established = 7200
net.netfilter.nf_conntrack_checksum = 0
net.netfilter.nf_conntrack_tcp_timeout_syn_sent = 15
net.ipv4.tcp_keepalive_time = 60
net.ipv4.tcp_keepalive_intvl = 10
net.ipv4.tcp_keepalive_probes = 3
net.ipv4.ip_local_port_range = 1025 65530
net.ipv4.tcp_timestamps = 0
EOF
}

dowse-check() {
    fn dowse-check
    func "$R/conf dowse_path_configuration"
    func "$R/conf/settings dowse_path_configuration"
    func "$R/conf/network dowse_path_configuration"
    freq=($R/conf $R/conf/settings $R/conf/network)
    ckreq || return $?

    act "checking requirements to run dowse..."
    # this is a check on binaries present in PATH
    # if not found, Dowse will abort.
    # for each found, Dowse will load zlibs/$.sh if present
#    for req in setuidgid dnsmasq iptables ebtables; do
#        require $req || return 1
#    done

    
    root=1
    [[ "$UID" = "0" ]] || unset root
    if [[ "$root" = "" ]]; then
        warn "no root privileges, limited functionality"
    else
        act "root privileges granted"
    fi

    dowse_uid=${dowse_uid:-`id -un`}
    dowse_gid=${dowse_gid:-`id -gn`}

    _verbose "Dowse command: ::1 commands::" "$*"
    _verbose "Caller: uid[::1 uid::], gid[::2 gid::], tty[::3 tty::]." \
        $dowse_uid $dowse_gid $TTY



    act "daemons running as user and group $dowse_uid:$dowse_gid"
    mkdir -p $R/log
    mkdir -p $R/run
    [[ -z $root ]] || {
        # setup dirs
        chmod go-rwx $R/log
        chown -R $dowse_uid:$dowse_gid $R/log
        
        chmod go-rwx $R/run
        chown -R $dowse_uid:$dowse_gid $R/run
    }

    func "::1 dir:: directory writable by ::2 uid::" \
        run $dowse_uid
    touch $R/run/test
    rm -f $R/run/test

    func "::1 dir:: directory writable by ::2 uid::" \
        log $dowse_uid
    touch $R/log/test
    rm -f $R/log/test

    act "all requirements in place"

    return 0
}

# }}}


# {{{ DOWSE FUNCTIONS
dowse-setup() {
    fn "Setup dowse core configurations"
    freq=($R/conf/settings $R/conf/network)
    ckreq

    dowse-check

    func "reading configuration in conf/settings"
    # zlibs/confstore
    conf-load


    [[ -z $root ]] || {

        # generate dnsmasq configuration
        rm -f $R/run/dnsmasq.conf
        dnsmasq-conf > $R/run/dnsmasq.conf

        # set permissions of setup files
        chown -R $dowse_uid:$dowse_gid $R/log
        chown -R $dowse_uid:$dowse_gid $R/run

    }

    chmod go-rwx $R/log
    chmod go-rwx $R/run

    act "setup completed in ::1 path::" $R
    return 0
}

# }}}

# {{{ MODULES

dowse-modules-setup() {
    fn dowse-module-setup
    freq=($R/modules/enabled)
    ckreq || return $?

    mods=()
    enabled=`find -L $R/modules/enabled -maxdepth 1 -type d`

    # remove all service definitions for modules from consul
    consmods=`find $R/run/consul.d -maxdepth 1 -type f -name 'module-*.json'`
    for m in ${(f)consmods}; do
        rm -f $m
    done

    for i in ${(f)enabled}; do
        [[ -r $i/dowse ]] || continue
        
        mods+=($i)
        
        source $i/dowse
        notice "Setup module: ::1 name::" $dowse_mod_name
        act "$dowse_mod_desc"

        pushd $R
        module-setup
        popd

        func "announcing modules"
        .set modules/$dowse_mod_name "$dowse_mod_desc
type: $dowse_mod_type
ports: $dowse_mod_ports
depends: $dowse_mod_deps
authors: $dowse_mod_authors
version: $dowse_mod_version
"

        [[ ${#dowse_mod_ports} -gt 0 ]] && consul-add-service

    done
}

dowse-modules-start() {
    fn dowse-module-start
    freq=($R/modules/enabled)
    ckreq

    [[ ${#mods} = 0 ]] && {
        act "no modules activated"
        return 0
    }

    for i in $mods; do

        # execute the module-start()
        source $i/dowse
        notice "Setup module: ::1 name::" $dowse_mod_name
        act "$dowse_mod_desc"

        pushd $R
        module-start
        popd

        .set modules/$dowse_mod_name "
$dowse_mod_desc

type: $dowse_mod_type
ports: $dowse_mod_ports
depends: $dowse_mod_deps
authors: $dowse_mod_authors
version: $dowse_mod_version"

    done
    
    consul reload

}

dowse-modules-stop() {
    fn dowse-module-stop

    enabled=`find -L $R/modules/enabled -maxdepth 1 -type d`
    for i in ${(f)enabled}; do

        [[ -r $i/dowse ]] || continue

        source $i/dowse
        
        pushd $R
        module-stop
        popd

    done
}

# }}}

# {{{ MAIN

dowse-start() {
    fn dowse-start
    req=(interface dowse netmask wan)
    freq=($R/run/dnsmasq.conf)
    ckreq

    [[ -r $R/run/consul.pid ]] && {
        warn "Dowse is already running"
        return 0
    }
    notice "Starting Dowse"

    [[ -z $root ]] || {

        PGL=`pidof pgld`
        [[ "$PGL" = "" ]] || {
            act "PeerGuardian found running, will restart it accordingly"
            pglcmd stop }
        
        act "set up $interface interface"
        ifconfig $interface $dowse netmask $netmask up
        route add default gw $wan
        
        func "enable masquerading"
        modprobe nf_conntrack_ipv4
        sysctl net.netfilter.nf_conntrack_acct=1
        # strenghten and optimize a bit the system for networking
        sysctl-setup
        
        func "enable ip forwarding"
        print 1 >> /proc/sys/net/ipv4/ip_forward

        func "bugfix for routing table weirdness in Linux >3.1"
        # see https://lkml.org/lkml/2011/11/18/191
        # and http://www.spinics.net/lists/netdev/msg179687.html
        print 0 >>/proc/sys/net/ipv4/conf/$interface/accept_redirects

        [[ "$firewall" = "no" ]] || {
            ebtables-stop
            iptables-stop
        }        

        [[ "$firewall" = "yes" ]] && {
            ebtables-start
            iptables-start
        }
                
        # start the dnsmasq daemon
        dnsmasq-start run/dnsmasq.conf
        
        # if PeerGuardian was running, start it again
        [[ "$PGL" = "" ]] || { pglcmd start }

    }

    act "launching consul"
    consul-start


    dowse-modules-setup

    dowse-modules-start
    
}

dowse-stop() {
    fn "dowse-stop"
 
    dowse-modules-stop

    [[ -r $R/run/consul.pid ]] && consul-stop

    [[ -z $root ]] || {
        dnsmasq-stop
        iptables-stop
        ebtables-stop
    }

    consul-stop

    notice "Dowse is not running."

}

dowse-parse-leases() {
    awk '
BEGIN { c=0 }
{
  mac[c]=$2
  ip[c]=$3
  if($4=="*") host[c]="anonymous"; else host[c]=$4
  c++
}
END {
  printf "mac=("; for(i=0;i<c;i++) { printf "%s ", mac[i] }; printf ")\n"
  printf "ip=("; for(i=0;i<c;i++) { printf "%s ", ip[i] }; printf ")\n"
  printf "host=("; for(i=0;i<c;i++) { printf "%s ", host[i] }; printf ")\n"
}' $R/run/leases
}

dowse-status() {
    fn dowse-status
    freq=($R/run/leases)
    ckreq

    typeset -a mac ip host ping known
    notice "Reporting network status"
    eval `dowse-parse-leases`
    known=()
    ping=()

    function TRAPZERR() { }

    for i in {0..${#mac}}; do
        [[ $mac[$i] = "" ]] && { continue }

        known[$i]="unknown"
        grep "${mac[$i]}" $R/conf/network > /dev/null
        [[ $? = 0 ]] && known[$i]="known"

        ping[$i]="offline"
        nmap -sn -n -oG - $ip[$i] | grep -i 'status: up' > /dev/null
        [[ $? = 0 ]] && ping[$i]="online"

        if [[ "$known[$i]" == "known" ]]; then

            yes "$ping[$i]\t $mac[$i]\t $ip[$i]\t $host[$i]"
            .set things_known/$host[$i] "status: $ping[$i]
ip: $ip[$i]
mac: $mac[$i]"

        else

            no "$ping[$i]\t $mac[$i]\t $ip[$i]\t $host[$i]"
            .set things_unknown/$host[$i] "status: $ping[$i]
ip: $ip[$i]
mac: $mac[$i]"

        fi
    done
}

dowse-scan() {
    notice "Scanning unknown network objects"
    eval `dowse-parse-leases`

    for s in {0..${#mac}}; do
        [[ $mac[$s] == "" ]] && { continue }
        grep "${mac[$s]}" $R/conf/network > /dev/null
	    [[ $? == 1 ]] && { # unknown
	        act "Running scan on ::1 ip:: (::2 host::)" ${ip[$s]} ${host[$s]}
            func "$s: nmap -A -F -sT -Pn -T5 \"${ip[$s]}\""
            nmap -A -F -sT -Pn -T5 -n "${ip[$s]}"
	        print
        }
    done

}



# if args, call them
[[ "$*" = "" ]] || {
    TRAPZERR() { }
    $*
}

# be nice with the environment
# return $?

# }}}
