#!/usr/bin/env zsh

privoxy-extract() {
    fn privoxy-extract

    # check if already imported
    [[ -r $R/run/privoxy ]] && return 0

    deb-download privoxy

    cp $R/tmp/usr/sbin/privoxy $R/run || {
        error "privoxy binary not found"
        return 1 }

    act "privoxy binary imported"
    func "`ls $R/tmp`"

    rm -rf $R/tmp

    func "`file $R/run/privoxy`"
}

privoxy-conf() {
    # Privoxy configuration template
    func "generating privoxy configuration"
    cat <<EOF
user-manual /usr/share/doc/privoxy/user-manual
confdir /etc/privoxy
toggle  1
enable-remote-toggle  0
enable-remote-http-toggle  0
enable-edit-actions 1
enforce-blocks 0
buffer-limit 64000

forwarded-connect-retries  0
accept-intercepted-requests 1
allow-cgi-request-crunching 0
split-large-forms 0
keep-alive-timeout 5
socket-timeout 300
handle-as-empty-doc-returns-ok 1

# pass through i2p for urls.i2p
# forward .i2p $address:4444
# forward .i2p 127.0.0.1:4444

# direct access
forward $hostname .

filterfile default.filter
actionsfile match-all.action # Actions that are applied to all sites and maybe overruled later on.
actionsfile default.action   # Main actions file
actionsfile user.action      # User customizations
EOF

}

# $1 arg is path to configuration
privoxy-start() {
    fn privoxy-start
    conf=${1:-$R/run/privoxy.conf}
    freq=($conf)
    ckreq || return 1

    # pid-file is not really a privoxy directive
    pidfile=`awk '/^pid-file/ { print $2 }' $conf`
    rm -f $conf.real
    sed 's/pid-file.*//' $conf > $conf.real

    act "starting privoxy: $conf"
    if [[ -z $root ]]; then
        $R/run/privoxy --pidfile $pidfile $conf.real
    else
        $R/run/privoxy --user $dowse_uid --pidfile $pidfile $conf.real
    fi

}

# $1 arg is path to pid
privoxy-stop() {
    fn privoxy-stop
    pidfile=$1
    freq=($pidfile)
    ckreq || return 0

    pid=`cat $pidfile`
    act "stopping privoxy pid: ::1 pid::" $pid
    kill $pid
    waitpid $pid

}
