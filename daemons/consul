#!/usr/bin/env zsh
#
# Dowse - consul manager
#
# Copyright (C) 2012-2015 Dyne.org Foundation
#
# designed, written and maintained by Denis Roio <jaromil@dyne.org>
#
# This source code is free software; you can redistribute it
# and/or modify it under the terms of the GNU Public License
# as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later
# version.
#
# This source code is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  Please refer to the GNU Public License for more
# details.
#
# You should have received a copy of the GNU Public License
# along with this source code; if not, write to: Free
# Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
# 02139, USA.

# safety setting
GOMAXPROCS=10


vars+=(cluster_addr)

.consul-init() {
    fn ".consul-init $*"

    # set default values in case none is set already
    setdef() { consul_conf[$1]=${consul_conf[$1]:-$2} }

    setdef "datacenter" "dowse"
    setdef "data_dir" "$R/consul/datadir"
    setdef "log_level" "INFO"
    setdef "node_name" "$hostname"
    setdef "disable_update_check" true
    setdef "domain" "$lan"
    setdef "leave_on_terminate" true
    setdef "recursor" "$address"


    setdef() { consul_watch[$1]=${consul_watch[$1]:-$2} }
    setdef watches $R/consul/watches

    unset setdef

    mkdir -p $R/run/consul.d || zerr

    # check binary platform
    arch=`uname -m`

    pushd $R/consul
    case $arch in
        x86_64)
            act "detected 64bit binary architecture"
            [[ -r consul ]] || { # no consul binary found
                act "downloading consul binary"
                # using wget because cloudfront does redirects unsupported by curl
                wget "https://dl.bintray.com/mitchellh/consul/0.5.2_linux_amd64.zip"
                unzip 0.5.0_linux_amd64.zip # unzipped is just 'consul'
            }
            ;;
        i686|i586|i486|i386)
            act "detected 32bit binary architecture"
            [[ -r consul ]] || { # no consul binary found
                wget "https://dl.bintray.com/mitchellh/consul/0.5.2_linux_386.zip"
                unzip 0.5.0_linux_386.zip # unzipped is just 'consul'
            }

            ;;
        *)
            error "Architecture not supported: $arch"
            zerr
            ;;
    esac
    popd
}

# renders configuration
.consul-conf() {
    fn ".consul-conf $*"
    req=(consul_conf)
    ckreq || return $?

    conf=$R/run/consul.json
    rm -f $conf || zerr
    touch $conf || zerr


    sep="{"
    for c in ${(k)consul_conf}; do
        print - $sep >> $conf

        # deal with booleans
        case "${consul_conf[$c]}" in
            true|false)
                print -n - "\"$c\": ${consul_conf[$c]}" >> $conf
                ;;
            *)
                print -n - "\"$c\": \"${consul_conf[$c]}\"" >> $conf
                ;;
        esac

        sep=","
    done


    # now render watches
    [[ ${#consul_watch} -gt 0 ]] && {
        print - "," >> $conf
        print - "\"watches\":" >> $conf
        sep="["
        for w in ${(k)consul_watch}; do
            print - $sep >> $conf
            print - "{ \"type\": \"checks\"," >> $conf
            print -n - "\"handler\": \"${consul_watch[$w]}\" }" >> $conf
            sep=","
        done
        print >> $conf
        print "]" >> $conf
    }

    print "}" >> $conf
}

# dowse_mod_* vars must be initialized by having sourced a dowse
# module before calling this function
consul-add-service() {
    fn "consul-add-service $*"
    req=(dowse_mod_name dowse_mod_ports)
    freq=($R/run/consul.d)
    ckreq || return $?

    # use a generic check or the one provided by the module
    check=$R/consul/generic_check
    [[ -r $R/modules/enabled/$dowse_mod_name/check ]] && {
        check=$R/modules/enabled/$dowse_mod_name/check
    }

    # parse the ports definition in module to list services
    for p in $dowse_mod_ports; do

        serv=${p[(ws:/:)1]}
        # TODO: check port is really a numeric
        port=${p[(ws:/:)2]}
        prot=${p[(ws:/:)3]}
        # TODO: make better tags

        # each service needs a separate file
        conf=$R/run/consul.d/module-$serv.json
        rm -f $conf
        cat <<EOF > $conf
{
  "service": {
    "name": "$serv",
    "tags": [ "$dowse_mod_name" ],
    "port": $port,
    "check": {
      "script": "$check $serv $port $prot",
      "interval": "10s"
    }
  }
}
EOF

        act "added service port $p"

    done

}

# changes consul configuration and reloads it
consul-set-conf() {
    fn "consul-set $*"
    freq=(consul/consul)
    ckreq || return $?

    consul_conf[$1]=${consul_conf[$1]:-$2}
    .consul-conf
    consul reload
}

consul() {
    fn "consul $*"
    freq=($R/consul/consul)
    ckreq || return $?

    # handle differences between consul commands

    os=`uname -o`

    [[ "$os" = "Cygwin" ]] && {

        touch $R/log/consul.log || zerr
        fn "consul launch"
        orig_dowse_path=$R
        R="C:\\dowse\\"
        func "Path for consul: $R"

    }

    case $1 in
        agent)
            $R/consul/consul $* \
                -config-file $R/run/consul.json \
                -config-dir $R/run/consul.d \
                -dc dowse1 -client $address
            ;;

        'exec') # cheap security measure: chroot exec to dowse dir
            shift 1
            $R/consul/consul exec \
                -http-addr $address:8500 \
                $R/$*
            ;;
        *)
            if [[ "$1" = "" ]]; then
                $R/consul/consul
            else
                _command=$1
                shift 1
                $R/consul/consul \
                    $_command --rpc-addr=$address:8400 $*
            fi
            ;;
    esac

    [[ "$os" = "Cygwin" ]] && {

        touch $R/log/consul.log || zerr
        R=$orig_dowse_path

    }

    return $?
}

consul-start() {
    fn "consul-start $*"


    [[ -f $R/run/consul.pid ]] && {
        warn "consul running: (`cat $R/run/consul.pid`) (run/consul.pid)"
        warn "call consul-stop to restart"
        return 1
    }


    mkdir -p $R/consul/datadir || zerr

    .consul-init
    .consul-conf
    # "watches": [
    #   {
    #       "type": "checks",
    #       "handler": "/usr/bin/health-check-handler.sh"
    #   }
    # ]

    os=`uname -o`
    if [[ "$os" = "Cygwin" ]]; then

        touch $R/log/consul.log || zerr

        fn "consul launch"
        orig_dowse_path=$R
        R="C:\\dowse\\"
        func "Dowse path for consul: $R"
        export GOMAXPROCS=$GOMAXPROCS
        $R/consul/consul agent \
            -config-file $R/run/consul.json \
            -config-dir $R/run/consul.d \
            -ui-dir $R/consul/web \
            -pid-file $R/run/consul.pid \
            -client $address -bind $address -dc dowse.it \
            2>&1 >> $R/log/consul.log &
        R=$orig_dowse_path

    else # running on gnu/linux

        touch $R/log/consul.log || zerr
        fn "consul launch"
        export GOMAXPROCS=$GOMAXPROCS

        # if root then run as server, else as client

        if [[ -z $root ]]; then
            act "launching consul as client"
            $R/consul/consul agent \
                -config-file $R/run/consul.json \
                -config-dir $R/run/consul.d \
                -ui-dir $R/consul/web \
                -pid-file $R/run/consul.pid \
                -client $address -bind $address -dc dowse1 \
                2>&1 >> $R/log/consul.log &

        else # running as root

            act "launching consul as server"
            $R/consul/consul agent \
                -config-file $R/run/consul.json \
                -config-dir $R/run/consul.d \
                -ui-dir $R/consul/web \
                -pid-file $R/run/consul.pid \
                -client $address -bind $address \
                -dc dowse1 -server -bootstrap \
                2>&1 >> $R/log/consul.log &

        fi

    fi

    # wait for leadership to be settled
    sleep 3
}

consul-stop() {
    fn consul-stop
    freq=($R/run/consul.pid)
    ckreq || return $?

    act "sending quit signal to Consul"

    killpidfile $R/run/consul.pid

    act "Consul is not running."
}
