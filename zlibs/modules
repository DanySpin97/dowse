#!/usr/bin/env zsh
#
# Copyright (C) 2012-2015 Dyne.org Foundation
#
# Dowse is designed, written and maintained by Denis Roio <jaromil@dyne.org>
#
# This source code is free software; you can redistribute it
# and/or modify it under the terms of the GNU Public License
# as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later
# version.
#
# This source code is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  Please refer to the GNU Public License for more
# details.
#
# You should have received a copy of the GNU Public License
# along with this source code; if not, write to: Free
# Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
# 02139, USA.


dowse-module-load() {
    fn dowse-module-load
    mod="$1"

    func "Loading module: $1"

    # main module file is called dowse
    # skip module if not present
    core_script="$1/dowse"
    [[ -r "$core_script" ]] || {
        # check also relative path, reason we don't use ckreq
        core_script="$R/modules/enabled/$1/dowse"
        [[ -r "$core_script" ]] || return 1
    }

    # reset all variables that may be set by a  preceeding module
    command -v module-setup >/dev/null && unset -f module-setup
    command -v module-start >/dev/null && unset -f module-start
    command -v module-stop >/dev/null && unset -f module-stop
    unset dowse_mod_name
    unset dowse_mod_desc
    unset dowse_mod_tags
    unset dowse_mod_ports
    unset dowse_mod_daemons
    unset dowse_mod_authors
    unset dowse_mod_version

    # read all the module, instantiate functions
    source $core_script

    # check at least these 3 functions are declared
    command -v module-setup > /dev/null && \
        command -v module-start > /dev/null && \
        command -v module-stop > /dev/null || {
            warning "invalid module: $i"
            return 1 }

    # TODO check also header variables

    return 0
}

dowse-module-setup() {
    fn dowse-module-setup

    notice "Setup module: $dowse_mod_name (${dowse_mod_tags})"
    act "$dowse_mod_desc"

    for dep in $dowse_mod_daemons; do
        ${dep}-extract
        [[ $? = 0 ]] || {
            error "failed importing $dep"
            error "$dowse_mod_name depends on this daemon, cannot proceed loading"
            return 1 }
    done

    func "all daemons found: ${dowse_mod_daemons}"
    func "ports opened: $dowse_mod_ports"
    func "author: ${dowse_mod_authors} version: $dowse_mod_version"

    module-setup || {
        warning "cannot setup module: $dowse_mod_name"
        return 1 }
}

dowse-module-start() {
    fn dowse-module-start

    notice "Starting module $dowse_mod_name"

    if module-start; then

        act "$dowse_mod_name started succesfully"

#         func "announcing modules"
#         cat <<EOF | .put $address /v1/kv/modules/$dowse_mod_name
# $dowse_mod_desc

# type: $dowse_mod_type
# ports: $dowse_mod_ports
# depends: $dowse_mod_deps
# authors: $dowse_mod_authors
# version: $dowse_mod_version"
# EOF

        # # add service listing on consul
        # [[ ${#dowse_mod_deps} -gt 0 ]] && consul-add-service

        # consul reload
    else
        warning "cannot start module $dowse_mod_name"
        return 1
    fi
}

dowse-module-stop() {
    fn dowse-module-stop

    act "stopping module: $dowse_mod_name"

    if module-stop; then
        act "$dowse_mod_name stopped"
        # [[ -r "$R/run/consul.d/module-${1}.js" ]] && {
        #     rm "$R/run/consul.d/module-${1}.js"
        #     consul-reload
        # }
    else
        warning "problems stopping module: $dowse_mod_name"
    fi
}
