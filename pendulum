#!/usr/bin/env zsh
#
# Copyright (C) 2016 Dyne.org Foundation
#
# Designed, written and maintained by Denis Roio <jaromil@dyne.org>
#
# This source code is free software; you can redistribute it
# and/or modify it under the terms of the GNU Public License
# as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later
# version.
#
# This source code is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  Please refer to the GNU Public License for more
# details.
#
# You should have received a copy of the GNU Public License
# along with this source code; if not, write to: Free
# Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
# 02139, USA.

# This standalone program runs every N seconds and gathers current
# information on network objects, updating it in redis

vars+=(now interval)
maps+=(obj)
source /usr/local/dowse/zshrc

# gather_network_info fills in global maps
net_devices=()
net.scan_devices
net_ip4_addr=()
net.scan_addresses

now=`date +'%s'`
interval=10 # seconds

notice "Starting pendulum on `date -d @$now`"

net_addr_to_network() {
    fn net_addr_to_cclass $*
    local _addr="$1"
    req=(_addr)
    ckreq || return $?
    print "${_addr[(ws:.:)1]}.${_addr[(ws:.:)2]}.${_addr[(ws:.:)3]}.0/24"
}


resolve_obj_hostname() {
    fn resolve_obj_hostname $*

    hh="`host $obj[ip4] | awk '{print $NF}'`"
    hh[${#hh}]='\0'
    obj[hostname]=${hh%%.*}
    func "resolved: $obj[hostname]"
}

# finds out LAN neighbours, their mac and their state
# this establishes mac addresses as indexes
update_ip_neigh() {
    fn update_ip_neigh $*

    for o in "${(f)$(launch ip neigh)}"; do
        func "$o"

        # parse everything in a map
        obj=()

        # not interesting if no mac found (REVIEW)
        obj[macaddr]="${o[(w)5]}"
        [[ "$obj[mac]" = "FAILED" ]] && continue

        # get the ip4 address
        obj[ip4]="${o[(w)1]}"

        obj[iface]="${o[(w)3]}"

        obj[state]="${o[(w)6]}"

        resolve_obj_hostname

        saved=`print - "SELECT * from found where
macaddr=\"$obj[macaddr]\"
and ip4=\"$obj[ip4]\"
;" | $sql -batch $H/run/things.db`

        [[ ${#saved} = 0 ]] && {
            # no records found
            nownow=`date -d @$now '+%Y-%m-%dT%H-%M'`
            cat <<EOF | $sql -batch $H/run/things.db
INSERT OR IGNORE
into found (macaddr,ip4,iface,state,last,age)
values("$obj[macaddr]","$obj[ip4]","$obj[iface]","$obj[state]",
"$nownow","$nownow");
EOF
            continue
        }

        for i in "${(f)$(print $saved | sql_idx_parse $R/db/thing.idx)}"; do

            _k=${i[(w)1]}
            _v=${i[(w)2]}
            func "$_k = $_v"
            [[ "$obj[$_k]" = "" ]] || { # key is defined in object
                [[ "$obj[$_k]" = "$_v" ]] || { # values differ
                    # TODO: send events to redis
                    warning "changed $_k: $_v -> $obj[$_k]"
                }
            }
        done

    done
}

update_arp_scan() {
    fn update_arp_scan $*

    ###### Active ARP scan
    ## using netdiscover, retrieves OS from MAC fingerprints
    for _dev in ${(k)net_ip4_addr}; do
        _addr=${net_ip4_addr[$_dev]}
        _net=`net_addr_to_network $_addr`
        for t in "${(f)$(launch netdiscover -i $_dev -r $_net -P -N)}"; do
            [[ "$t" = "" ]] && continue
            [[ "$t" =~ "^--" ]] && continue
            obj=()
            obj[macaddr]=${t[(w)2]}
            obj[ip4]=${t[(w)1]}
            obj[iface]=$_dev
            obj[last]=$nownow
            obj[os]="$(print - $t | awk '
{ for(c=5;c<=NF;c++) printf $c " " }
')"

            resolve_obj_hostname

            cat <<EOF | $sql -batch $H/run/things.db
INSERT OR IGNORE
into found (macaddr,ip4,iface,last,os,hostname)
values("$obj[macaddr]","$obj[ip4]","$obj[iface]",
"$obj[last]","$obj[os]","$obj[hostname]");

UPDATE found SET os = "$obj[os]", hostname = "$obj[hostname]"
WHERE macaddr = "$obj[macaddr]";
EOF
        done
    done
}

# main
while true; do
    update_ip_neigh
    update_arp_scan
    sleep 10
done

