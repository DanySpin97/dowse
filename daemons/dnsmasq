#!/usr/bin/env zsh
#
# Copyright (C) 2012-2015 Dyne.org Foundation
#
# Dowse is designed, written and maintained by Denis Roio <jaromil@dyne.org>
#
# This source code is free software; you can redistribute it
# and/or modify it under the terms of the GNU Public License
# as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later
# version.
#
# This source code is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  Please refer to the GNU Public License for more
# details.
#
# You should have received a copy of the GNU Public License
# along with this source code; if not, write to: Free
# Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
# 02139, USA.

dnsmasq-conf() {
    fn "dnsmasq-conf"

    cat <<EOF
address=/$hostname/$address
address=/$hostname.$lan/$address
# address=/.i2p/$address
# address=/.onion/$address
# dnscrypt-proxy
server=127.0.0.1#53443
bogus-priv
cache-size=2048
dhcp-range=$dowse_guests
addn-hosts=$H/run/hosts
dhcp-leasefile=$H/run/leases
domain-needed
domain=$lan
no-resolv
local=/$lan/
local=$dns
expand-hosts
edns-packet-max=4096
interface=$interface
listen-address=$address,127.0.0.1
# local=//127.0.0.1#53
# local=/$lan/
user=$dowse_uid
group=$dowse_gid
EOF

    [[ -r $E/network ]] && {
        # read the network configuration of known hosts
        known=`cat $E/network`
        act "$E/network (${#known} bytes parsed)"
        # for i in ${(f)known}; do
        #     func "$i"
        # done

        # DNSMasq LAN resolution
        func "Fixing entries for known peers"
        rm -f $H/run/dnsmasq.network
        # this is basically a dnsmasq host configuration file
        print "dhcp-option=option:router,$address" > $H/run/dnsmasq.network

        # this is our generated hosts file
        func "Generating hosts file"
        rm -f $H/run/hosts
        print "127.0.0.1 localhost" > $H/run/hosts

        typeset -aU known_network
        # pass via an array to remove duplicates
        for i in ${(f)known}; do known_network+=($i); done

        for i in ${known_network}; do
            [[ "${i[1]}" = "#" ]] && continue

            if [[ "$i" -regex-match '^..:..:..:..:..:..' ]]; then
                #       if [ $? = 0 ]; then # mac address is first
                host=${i[(w)2]}
                ip=${i[(w)3]}
            else # no mac address specified
                host=${i[(w)1]}
                ip=${i[(w)2]}
            fi
            [[ "$host" = "ignore" ]] || {
                # add a line to the hosts list
                print "$ip $host" >> $H/run/hosts }
        done

        func "generating dnsmask.network"
        rm -f $H/run/dnsmasq.network
        # TODO: first entry about self
        touch $H/run/dnsmasq.network
        for i in ${known_network}; do
            [[ "$i" -regex-match '^..:..:..:..:..:..' ]] && {
                func "$i"
                # gather configuration into variables, line by line
                mac=${i[(w)1]}
                host=${i[(w)2]}
                ip=${i[(w)3]}
                # add a line to the dnsmasq host list
                print "dhcp-host=$mac, $host, $ip" >> $H/run/dnsmasq.network
            }
        done

        # append network settings to dnsmasq conf
        cat $H/run/dnsmasq.network
    }
}

dnsmasq-exec() {
    fn dnsmasq-exec $*
    freq=($conf)
    ckreq || return $?

    ztmp
    launch  dnsmasq -x $ztmpfile -C $conf
    savepid dnsmasq $ztmpfile

    return $?
}
